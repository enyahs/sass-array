/**
 * Set up function for intval().
 * 
 * @param String or Number $v
 * @return intval_handle
 */
@function intval(
    $v
)
{

    $arg_value_type: type-of($v);
    $valid_value_type: ($arg_value_type == number or $arg_value_type == string);

    @if(
        (
            $valid_value_type
        ) 
    )
    {
        
        @return intval_handle(
            $v
        );

    }
    @else
    {

        $errors: '';

        $errors: $errors + if(
            $valid_array_type == false, 
            "\a\aTypeError intval(): \a\a parameter: 1 \a expected: string or int \a given: " + $arg_value_type + "\a\a",
            ""
        );

        @error $errors;

    }

    @return false;

}

/**
 * Get the integer value of a variable.
 * 
 * @param Mixed $v
 * @return Int - The integer value of the variable.
 */
@function intval_handle(
    $v
)
{

    $v_type: type-of($v);

    @if($v_type == number)
    {

        @return $v;

    }
    @else if($v_type == string)
    {

        $result: 0;
        $digits: 0;
        $negative: str-slice($v, 1, 1) == '-';
        $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

        @for $i from if($negative, 2, 1) through str-length($v) 
        {

            $character: str-slice($v, $i, $i);

            @if not (
                index(map-keys($numbers), $character) or 
                $character == '.'
            ){

                @return to-length(
                    if($negative, -$result, $result), 
                    str-slice($v, $i)
                );

            }

            @if ($character == '.') 
            {

                $digits: 1; 

            } 
            @else if ($digits == 0)
            {

                $result: $result * 10 + map-get($numbers, $character);  

            } 
            @else 
            {

                $digits: $digits * 10;
                $result: $result + map-get($numbers, $character) / $digits;

            }
        

        }

        @return if($negative, -$result, $result);

    }
    
    @return false;

}